@inherits DotNetNuke.Web.Mvc.Framework.DnnWebViewPage<IEnumerable<valami.valami.Models.Order>>

@*@using System.Linq*@
@using System.Text.RegularExpressions
@using DotNetNuke.Web.Mvc.Helpers
@using DotNetNuke.Entities.Users
@using DotNetNuke.Framework.JavaScriptLibraries

<link rel="stylesheet" href="@Url.Content("~/DesktopModules/MVC/valami/module.css")" />

<style>
    .calendar-container {
        display: flex;
        flex-direction: row;
        align-items: flex-start;
        gap: 20px;
        margin-top: 20px;
        margin-left: 10px !important;
        margin-right: 10px !important;
        /*margin-left: auto !important;
        margin-right: auto !important;*/
    }

    .calendar-wrapper {
        /*display: flex;
        justify-content: space-between;
        align-items: flex-start;*/
        flex: 3;
        margin-top: 2rem;
    }

    .calendar-box {
        flex: 1;
        border-radius: 20px 0px !important;
        overflow: hidden;
        border: 2px solid #3b240d;
        box-shadow: 0 0 10px #ccc;
    }

    #calendar {
        width: 100%;
        border-collapse: collapse;
    }

        #calendar th,
        #calendar td {
            text-align: center;
            border: 1px solid #ddd;
            padding: 10px;
            height: 80px;
            width: 14.28%;
            vertical-align: top;
            position: relative;
        }

        #calendar th {
            background-color: #3b240d;
            color: white;
            font-weight: bold;
        }

    .calendar-day {
        font-size: 1.1rem;
    }

    .planting-date {
        background-color: #ffcc99 !important;
        font-weight: bold !important
    }

    .watering-date {
        background-color: #99ecff !important;
    }

    .repotting-date {
        background-color: #cc99ff !important;
    }

    .combined-date {
        background-color: #ffb347 !important;
    }

    .calendar-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 1.5rem;
        font-weight: bold;
    }

        .calendar-controls button {
            background-color: #3b240d;
            color: white;
            border: none;
            padding: 5px 10px;
            font-size: 1.2rem;
            cursor: pointer;
            border-radius: 0px;
        }

    .sidebar {
        margin-left: 2rem;
        flex-shrink: 0;
    }

        .sidebar img {
            width: 300px;
            height: auto;
            display: block;
            margin-top: 50%;
            transform: translateY(-50%);
        }

    .header-area {
        margin-bottom: 2rem;
        margin-left: auto;
    }

        .header-area h2 {
            font-family: 'Arial Black', sans-serif;
            color: #3b240d;
            font-size: 1rem;
        }

        .header-area select,
        .header-area button,
        .header-area input[type="date"] {
            padding: 0.5rem;
            font-size: 1rem;
            margin-top: 0.5rem;
            border-radius: 20px 0px !important;
            height: 55px;
        }
</style>

@if (ViewBag.PlantingCategories == null)
{
    <p style="color:red;">A PlantingCategories null</p>
}


@if (ViewBag.ErrorMessage != null)
{
    <div class="alert alert-danger">
        @ViewBag.ErrorMessage
    </div>
}

@{
    var plantingCategories = ViewBag.PlantingCategories as IEnumerable<valami.valami.Models.PlantingCalendar>;
}

<div id="Order-@Dnn.ModuleContext.ModuleId">
    <div class="header-area">
        <label for="plantingCategorySelector">Növény kategória:</label>
        <select id="plantingCategorySelector">
            <option value="">-- Kérlek válassz --</option>
            @foreach (var category in plantingCategories ?? new List<valami.valami.Models.PlantingCalendar>())
            {
                <option value="@category.Id" data-watering="@category.WateringIntervalDays" data-repotting="@category.RepottingIntervalMonths">
                    @category.PlantType
                </option>
            }
        </select>

        <label for="plantingDate">Ültetési dátum:</label>
        <input type="date" id="plantingDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" />
    </div>
    <div class="calendar-container">
        <div class="calendar-wrapper">
            <div class="calendar-box">
                <div class="calendar-controls">
                    <button id="prevMonth">&lt;</button>
                    <span></span>
                    <button id="nextMonth">&gt;</button>
                </div>

                <table id="calendar">
                    <thead>
                        <tr>
                            <th>Hétfő</th>
                            <th>Kedd</th>
                            <th>Szerda</th>
                            <th>Csütörtök</th>
                            <th>Péntek</th>
                            <th>Szombat</th>
                            <th>Vasárnap</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>


        </div>
        <div class="sidebar">
            <img id="sidebarImage" src="/images/tanci.gif" alt="Oldalsó illusztráció" />
        </div>
    </div>
</div>

@section Scripts {
    <script>

        $(document).ready(function () {
            let currentMonth = localStorage.getItem("calendarMonth") !== null ? parseInt(localStorage.getItem("calendarMonth")) : new Date().getMonth();
            let currentYear = localStorage.getItem("calendarYear") !== null ? parseInt(localStorage.getItem("calendarYear")) : new Date().getFullYear();

            let selectedWateringInterval = null;
            let selectedRepottingInterval = null;
            let selectedPlantingDate = null;

            const savedCategoryId = localStorage.getItem("selectedPlantCategoryId");
            const savedPlantDate = localStorage.getItem("selectedPlantDate");

            if (savedCategoryId) {
                $("#plantingCategorySelector").val(savedCategoryId);
                const selectedOption = $("#plantingCategorySelector").find(":selected");
                selectedWateringInterval = parseInt(selectedOption.data("watering")) || 7;
                selectedRepottingInterval = parseInt(selectedOption.data("repotting")) || 90;
            }

            if (savedPlantDate) {
                $("#plantingDate").val(savedPlantDate);
                selectedPlantingDate = new Date(savedPlantDate);
            }

            function getWeatherIcon(date) {
                const formattedDate = date.toISOString().split('T')[0];  // Formázza a dátumot YYYY-MM-DD formátumban
                return $.ajax({
                    url: `/DesktopModules/MVC/valami/API/GetWeatherIcon/${formattedDate}`,
                    method: 'GET',
                    success: function (data) {
                        return data.iconUrl; // Visszaadja az ikont
                    },
                    error: function () {
                        return "/images/nap2.png"; // Ha hiba történik, akkor alapértelmezett ikont ad vissza
                    }
                });
            }

            function renderCalendar(year, month) {

                const firstDay = new Date(year, month, 1);
                const daysInMonth = new Date(year, month + 1, 0).getDate();
                const startDay = (firstDay.getDay() + 6) % 7;

                let html = "";
                let dayCounter = 1;
                const totalCells = Math.ceil((startDay + daysInMonth) / 7) * 7;

                for (let i = 0; i < totalCells / 7; i++) {
                    html += "<tr>";
                    for (let j = 0; j < 7; j++) {
                        const cellIndex = i * 7 + j;
                        if (cellIndex < startDay || dayCounter > daysInMonth) {
                            html += "<td></td>";
                        } else {
                            html += `
                                                    <td id="day-${dayCounter}" class="calendar-day">
                                                        <div>${dayCounter}</div>
                                                        <img id="weather-${dayCounter}" src="/images/nap2.png" style="width:20px; height:20px;" />
                                                    </td>`;
                            dayCounter++;
                        }
                    }
                    html += "</tr>";
                }

                $("#calendar tbody").html(html);
                if (selectedWateringInterval && selectedPlantingDate) {
                    highlightCalendar(selectedPlantingDate, selectedWateringInterval, selectedRepottingInterval);
                } else {
                    // Ha nincs teendő, akkor is állítsuk be a képet
                    $("#sidebarImage").attr("src", "/images/tanci.gif");
                }
                $(".calendar-controls span").text(`${year}. ${new Date(year, month).toLocaleString("hu-HU", { month: 'long' })}`);

                if (selectedWateringInterval && selectedPlantingDate) {
                    highlightCalendar(selectedPlantingDate, selectedWateringInterval, selectedRepottingInterval);
                }

            }

            $("#plantingDate").on("change", function () {
                const dateStr = $(this).val();
                const dateObj = new Date(dateStr);
                if (!isNaN(dateObj)) {
                    selectedPlantingDate = dateObj;
                    if (selectedWateringInterval && selectedRepottingInterval) {
                        highlightCalendar(selectedPlantingDate, selectedWateringInterval, selectedRepottingInterval);
                    }
                }
            });

            $("#plantingCategorySelector, #plantingDate").on("change", function () {
                const selectedOption = $("#plantingCategorySelector").find(":selected");
                const dateInput = $("#plantingDate").val();

                // If the default value is selected, hide the calendar and set the sidebar image
                if (!selectedOption.val() || !dateInput) {
                    clearCalendarHighlights();
                    selectedWateringInterval = null;
                    selectedRepottingInterval = null;
                    selectedPlantingDate = null;
                    $("#sidebarImage").attr("src", "/images/zoldik.gif"); // Set the sidebar image
                    $("#calendar").hide(); // Hide the calendar
                    $(".calendar-wrapper").hide();
                    return;
                }

                selectedWateringInterval = parseInt(selectedOption.data("watering")) || 7;
                selectedRepottingInterval = parseInt(selectedOption.data("repotting")) || 90;
                selectedPlantingDate = new Date(dateInput);

                if (isNaN(selectedPlantingDate.getTime())) {
                    alert("Érvénytelen dátum.");
                    return;
                }

                localStorage.setItem("selectedPlantCategoryId", selectedOption.val());
                localStorage.setItem("selectedPlantDate", dateInput);

                renderCalendar(currentYear, currentMonth);
                highlightCalendar(selectedPlantingDate, selectedWateringInterval, selectedRepottingInterval);
                $("#calendar").show(); // Show the calendar
                $(".calendar-wrapper").show();
            });

            $("#prevMonth").click(function () {
                currentMonth--;
                if (currentMonth < 0) {
                    currentMonth = 11;
                    currentYear--;
                }
                localStorage.setItem("calendarMonth", currentMonth);
                localStorage.setItem("calendarYear", currentYear);
                renderCalendar(currentYear, currentMonth);
            });

            $("#nextMonth").click(function () {
                currentMonth++;
                if (currentMonth > 11) {
                    currentMonth = 0;
                    currentYear++;
                }
                localStorage.setItem("calendarMonth", currentMonth);
                localStorage.setItem("calendarYear", currentYear);
                renderCalendar(currentYear, currentMonth);
            });

            function clearCalendarHighlights() {
                $(".planting-date, .watering-date, .repotting-date, .combined-date").removeClass("planting-date watering-date repotting-date combined-date");
            }

            function highlightCalendar(plantingDate, wateringInterval, repottingInterval) {
                const selectedOption = $("#plantingCategorySelector").find(":selected");

                clearCalendarHighlights();
                const displayedMonth = currentMonth;
                const displayedYear = currentYear;

                if (plantingDate.getMonth() === displayedMonth && plantingDate.getFullYear() === displayedYear) {
                    $("#day-" + plantingDate.getDate()).addClass("planting-date");
                }

                const wateringDays = [];
                let wateringDate = new Date(plantingDate);
                while (wateringDate <= new Date(displayedYear, displayedMonth + 1, 0)) {
                    if (wateringDate.getMonth() === displayedMonth && wateringDate.getFullYear() === displayedYear) {
                        wateringDays.push(wateringDate.getDate());
                    }
                    wateringDate.setDate(wateringDate.getDate() + wateringInterval);
                }

                const repottingDays = [];
                let repottingDate = new Date(plantingDate);
                while (repottingDate <= new Date(displayedYear, displayedMonth + 1, 0)) {
                    if (repottingDate.getMonth() === displayedMonth && repottingDate.getFullYear() === displayedYear) {
                        repottingDays.push(repottingDate.getDate());
                    }
                    repottingDate.setDate(repottingDate.getDate() + repottingInterval * 30);
                }

                const highlightedDays = new Set();
                wateringDays.forEach(day => highlightedDays.add(`w-${day}`));

                repottingDays.forEach(day => {
                    const isConflict = highlightedDays.has(`w-${day}`);
                    if (isConflict) {
                        $("#day-" + day).removeClass("watering-date").addClass("combined-date");
                    } else {
                        $("#day-" + day).addClass("repotting-date");
                    }
                });

                wateringDays.forEach(day => {
                    if (!repottingDays.includes(day)) {
                        $("#day-" + day).addClass("watering-date");
                    }
                });

                const today = new Date();
                today.setHours(0, 0, 0, 0);

                const plantingToday = plantingDate.getTime() === today.getTime();

                let wateringToday = false;
                let testWatering = new Date(plantingDate);
                testWatering.setHours(0, 0, 0, 0);
                while (testWatering <= today) {
                    if (testWatering.getTime() === today.getTime()) {
                        wateringToday = true;
                        break;
                    }
                    testWatering.setDate(testWatering.getDate() + wateringInterval);
                }

                let repottingToday = false;
                let testRepotting = new Date(plantingDate);
                testRepotting.setHours(0, 0, 0, 0);
                while (testRepotting <= today) {
                    if (testRepotting.getTime() === today.getTime()) {
                        repottingToday = true;
                        break;
                    }
                    testRepotting.setDate(testRepotting.getDate() + repottingInterval * 30);
                }

                if (plantingToday || repottingToday) {
                    $("#sidebarImage").attr("src", "/images/depis.gif");
                } else if (wateringToday) {
                    $("#sidebarImage").attr("src", "/images/licsilocsi.gif");
                } else {
                    $("#sidebarImage").attr("src", "/images/tanci.gif");
                }
            }

            renderCalendar(currentYear, currentMonth);
        });
    </script>
}
